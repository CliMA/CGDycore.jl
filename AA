struct _p_DM {
  PETSCHEADER(struct _DMOps);
  Vec                     localin[DM_MAX_WORK_VECTORS],localout[DM_MAX_WORK_VECTORS];
  Vec                     globalin[DM_MAX_WORK_VECTORS],globalout[DM_MAX_WORK_VECTORS];
  DMNamedVecLink          namedglobal;
  DMNamedVecLink          namedlocal;
  DMWorkLink              workin,workout;
  DMLabelLink             labels;            /* Linked list of labels */
  DMLabel                 depthLabel;        /* Optimized access to depth label */
  DMLabel                 celltypeLabel;     /* Optimized access to celltype label */
  void                    *ctx;    /* a user context */
  PetscErrorCode          (*ctxdestroy)(void**);
  ISColoringType          coloringtype;
  MatFDColoring           fd;
  VecType                 vectype;  /* type of vector created with DMCreateLocalVector() and DMCreateGlobalVector() */
  MatType                 mattype;  /* type of matrix created with DMCreateMatrix() */
  PetscInt                bind_below; /* Local size threshold (in entries/rows) below which Vec/Mat objects are bound to CPU */
  PetscInt                bs;
  ISLocalToGlobalMapping  ltogmap;
  PetscBool               prealloc_skip; // Flag indicating the DMCreateMatrix() should not preallocate (only set sizes and local-to-global)
  PetscBool               prealloc_only; /* Flag indicating the DMCreateMatrix() should only preallocate, not fill the matrix */
  PetscBool               structure_only; /* Flag indicating the DMCreateMatrix() create matrix structure without values */
  PetscInt                levelup,leveldown;  /* if the DM has been obtained by refining (or coarsening) this indicates how many times that process has been used to generate this DM */
  PetscBool               setupcalled;        /* Indicates that the DM has been set up, methods that modify a DM such that a fresh setup is required should reset this flag */
  PetscBool               setfromoptionscalled;
  void                    *data;
  /* Hierarchy / Submeshes */
  DM                      coarseMesh;
  DM                      fineMesh;
  DMCoarsenHookLink       coarsenhook; /* For transfering auxiliary problem data to coarser grids */
  DMRefineHookLink        refinehook;
  DMSubDomainHookLink     subdomainhook;
  DMGlobalToLocalHookLink gtolhook;
  DMLocalToGlobalHookLink ltoghook;
  /* Topology */
  PetscInt                dim;                  /* The topological dimension */
  /* Auxiliary data */
  PetscHMapAux            auxData;              /* Auxiliary DM and Vec for region denoted by the key */
  /* Flexible communication */
  PetscSF                 sfMigration;          /* SF for point distribution created during distribution */
  PetscSF                 sf;                   /* SF for parallel point overlap */
  PetscSF                 sectionSF;            /* SF for parallel dof overlap using section */
  PetscSF                 sfNatural;            /* SF mapping to the "natural" ordering */
  PetscBool               useNatural;           /* Create the natural SF */
  /* Allows a non-standard data layout */
  PetscBool               adjacency[2];         /* [use cone() or support() first, use the transitive closure] */
  PetscSection            localSection;         /* Layout for local vectors */
  PetscSection            globalSection;        /* Layout for global vectors */
  PetscLayout             map;
  /* Constraints */
  struct {
    PetscSection section;
    Mat          mat;
    Vec          bias;
  } defaultConstraint;
  /* Basis transformation */
  DM                      transformDM;          /* Layout for basis transformation */
  Vec                     transform;            /* Basis transformation matrices */
  void                   *transformCtx;         /* Basis transformation context */
  PetscErrorCode        (*transformSetUp)(DM, void *);
  PetscErrorCode        (*transformDestroy)(DM, void *);
  PetscErrorCode        (*transformGetMatrix)(DM, const PetscReal[], PetscBool, const PetscScalar **, void *);
  /* Coordinates */
  PetscInt                dimEmbed;             /* The dimension of the embedding space */
  DM                      coordinateDM;         /* Layout for coordinates */
  Vec                     coordinates;          /* Coordinate values in global vector */
  Vec                     coordinatesLocal;     /* Coordinate values in local  vector */
  PetscBool               periodic;             /* Is the DM periodic? */
  DMField                 coordinateField;      /* Coordinates as an abstract field */
  PetscReal              *L, *maxCell;          /* Size of periodic box and max cell size for determining periodicity */
  DMBoundaryType         *bdtype;               /* Indicates type of topological boundary */
  /* Null spaces -- of course I should make this have a variable number of fields */
  NullSpaceFunc           nullspaceConstructors[10];
  NullSpaceFunc           nearnullspaceConstructors[10];
  /* Fields are represented by objects */
  PetscInt                Nf;                   /* Number of fields defined on the total domain */
  RegionField            *fields;               /* Array of discretization fields with regions of validity */
  DMBoundary              boundary;             /* List of boundary conditions */
  PetscInt                Nds;                  /* Number of discrete systems defined on the total domain */
  DMSpace                *probs;                /* Array of discrete systems */
  /* Output structures */
  DM                      dmBC;                 /* The DM with boundary conditions in the global DM */
  PetscInt                outputSequenceNum;    /* The current sequence number for output */
  PetscReal               outputSequenceVal;    /* The current sequence value for output */
  PetscErrorCode        (*monitor[MAXDMMONITORS])(DM, void *);
  PetscErrorCode        (*monitordestroy[MAXDMMONITORS])(void **);
  void                   *monitorcontext[MAXDMMONITORS];
  PetscInt                numbermonitors;

  PetscObject             dmksp,dmsnes,dmts;
#ifdef PETSC_HAVE_LIBCEED
  Ceed                    ceed;                 /* LibCEED context */
  CeedElemRestriction     ceedERestrict;        /* Map from the local vector (Lvector) to the cells (Evector) */
#endif
};
