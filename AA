function Interpolate!(backend,FTB,uN,Fe::HDivConfElement,ElemType,Grid,QuadOrd,Jacobi,F)
  NumQuadL, WeightsL, PointsL = QuadRule(Grids.Line(),QuadOrd)
  X = zeros(3)
  VelSp = zeros(3)
  VelCa = zeros(3)
  n = zeros(3)
  DF = zeros(3,2)
  detDF = zeros(1)
  pinvDF = zeros(3,2)
  X = zeros(3)

  if ElemType == Grids.Quad()
    PointsE = zeros(2,NumQuadL,4)
    for iQ = 1 : NumQuadL
      PointsE[1,iQ,1] = PointsL[iQ]
      PointsE[2,iQ,1] = -1.0
      PointsE[1,iQ,2] = 1.0
      PointsE[2,iQ,2] = PointsL[iQ]
      PointsE[1,iQ,3] = PointsL[iQ]
      PointsE[2,iQ,3] = 1.0
      PointsE[1,iQ,4] = -1.0
      PointsE[2,iQ,4] = PointsL[iQ]
    end
  end  
  @. uN = 0
  for iE = 1 : Grid.NumEdges
    Edge = Grid.Edges[iE]
    if length(Edge.F) > 1
      iF = Edge.F[1]
      EdgeType = Edge.FE[1]
      for iQ = 1 : NumQuadL
        Jacobi!(DF,detDF,pinvDF,X,ElemType,PointsE[1,iQ,EdgeType],
          PointsE[2,iQ,EdgeType],Grid.Faces[iF], Grid)
        nBar = Grid.nBar[:, EdgeType]
        n[1] = (pinvDF[1,1] * nBar[1] + pinvDF[1,2] * nBar[2]) * detDF[1]
        n[2] = (pinvDF[2,1] * nBar[1] + pinvDF[2,2] * nBar[2]) * detDF[1]
        n[3] = (pinvDF[3,1] * nBar[1] + pinvDF[3,2] * nBar[2]) * detDF[1]
        _,VelSp[1],VelSp[2],VelSp[3], = F(X,0.0)
        lon,lat,r = Grids.cart2sphere(X[1],X[2],X[3])
        VelCa = VelSphere2Cart(VelSp,lon,lat)
        ind = Fe.Glob[EdgeType,iF]
        uN[iE] += - 0.5 * n' * VelCa * WeightsL[iQ]
      end  
    end  
  end  
end
