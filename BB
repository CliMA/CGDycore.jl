function DivUpwindRhoTrColumn!(FRhoTrC,uC,vC,w,RhoTrC,RhoC,Fe,dXdxI,J,ThreadCache,HorLimit)
  @unpack TCacheC1, TCacheC2, TCacheCol1, TCacheCol2 = ThreadCache
  Nz = size(uC,3)
  OrdPoly = Fe.OrdPoly
  D = Fe.DS

  tempZ = TCacheCol1[Threads.threadid()]
  TrRe = TCacheCol2[Threads.threadid()]
  temp = TCacheC1[Threads.threadid()]
  FluxZ = TCacheC2[Threads.threadid()]


  @inbounds for iz = 1 : Nz
    if HorLimit
      @views DivConvRhoTrCell!(FRhoTrC[:,:,iz],uC[:,:,iz],vC[:,:,iz],
        w[:,:,iz],w[:,:,iz+1],RhoTrC[:,:,iz],Fe,
        dXdxI[:,:,:,iz,:,:],J[:,:,:,iz],ThreadCache)
    else
      @views @. temp = -RhoTrC[:,:,iz] * ((dXdxI[:,:,1,iz,1,1] + dXdxI[:,:,2,iz,1,1]) * uC[:,:,iz] +
        (dXdxI[:,:,1,iz,1,2] + dXdxI[:,:,2,iz,1,2]) * vC[:,:,iz] +
        dXdxI[:,:,1,iz,1,3] * w[:,:,iz] + dXdxI[:,:,2,iz,1,3] * w[:,:,iz+1])
      @views DerivativeX!(FRhoTrC[:,:,iz],temp,D)
      @views @. temp = -RhoTrC[:,:,iz] * ((dXdxI[:,:,1,iz,2,1] + dXdxI[:,:,2,iz,2,1]) * uC[:,:,iz] +
        (dXdxI[:,:,1,iz,2,2] + dXdxI[:,:,2,iz,2,2]) * vC[:,:,iz] +
        dXdxI[:,:,1,iz,2,3] * w[:,:,iz] + dXdxI[:,:,2,iz,2,3] * w[:,:,iz+1])
      @views DerivativeY!(FRhoTrC[:,:,iz],temp,D)
    end
  end  

  if Nz > 1
    @inbounds for i = 1 : OrdPoly + 1
      @inbounds for j = 1 : OrdPoly + 1
        JC = (J[i,j,1,1] + J[i,j,2,1])  
        JCp1 = (J[i,j,1,2] + J[i,j,2,2])  
        Tr = RhoTrC[i,j,1] / RhoC[i,j,1]
        Trp1 = RhoTrC[i,j,2] / RhoC[i,j,2]
        Tr0 = ((3.0 * Tr - 2.0 * Trp1) * JC + Tr * JCp1) / (JC + JCp1)
        TrRe[i,j,1,1],TrRe[i,j,2,1] = RecU3(Tr0,Tr,Trp1,JC,JC,JCp1)
      end  
    end    
    @inbounds for iz = 2 : Nz - 1  
      @inbounds for i = 1 : OrdPoly + 1
        @inbounds for j = 1 : OrdPoly + 1
          JCm1 = (J[i,j,1,iz-1] + J[i,j,2,iz-1])  
          JC = (J[i,j,1,iz] + J[i,j,2,iz])  
          JCp1 = (J[i,j,1,iz+1] + J[i,j,2,iz+1])  
          Trm1 = RhoTrC[i,j,iz-1] / RhoC[i,j,iz-1]
          Tr = RhoTrC[i,j,iz] / RhoC[i,j,iz]
          Trp1 = RhoTrC[i,j,iz+1] / RhoC[i,j,iz+1]
          TrRe[i,j,1,iz],TrRe[i,j,2,iz] = RecU3(Trm1,Tr,Trp1,JCm1,JC,JCp1)
        end
      end  
    end    
    @inbounds for i = 1 : OrdPoly + 1
      @inbounds for j = 1 : OrdPoly + 1
        JCm1 = (J[i,j,1,Nz-1] + J[i,j,2,Nz-1])  
        JC = (J[i,j,1,Nz] + J[i,j,2,Nz])  
        Trm1 = RhoTrC[i,j,Nz-1] / RhoC[i,j,Nz-1]
        Tr = RhoTrC[i,j,Nz] / RhoC[i,j,Nz]
        Tr1 = ((3.0 * Tr - 2.0 * Trm1) * JC + Tr * JCm1) / (JCm1 + JC)
        TrRe[i,j,1,Nz],TrRe[i,j,2,Nz] = RecU3(Trm1,Tr,Tr1,JCm1,JC,JC)
      end  
    end    
    @inbounds for i = 1 : OrdPoly + 1
      @inbounds for j = 1 : OrdPoly + 1
        tempZ[i,j,1,1] =0.0
        wC = (dXdxI[i,j,2,1,3,1] * uC[i,j,1] +
          dXdxI[i,j,2,1,3,2] * vC[i,j,1] + dXdxI[i,j,2,1,3,3] * w[i,j,1+1])
        tempZ[i,j,2,1] = -0.5 * RhoC[i,j,1] * ((wC + abs(wC)) * TrRe[i,j,2,1] +
          (wC - abs(wC)) * TrRe[i,j,1,1+1])
      end
    end  
    @inbounds for iz = 2 : Nz - 1
      @inbounds for i = 1 : OrdPoly + 1
        @inbounds for j = 1 : OrdPoly + 1
          wC = (dXdxI[i,j,1,iz,3,1] * uC[i,j,iz] +
            dXdxI[i,j,1,iz,3,2] * vC[i,j,iz] + dXdxI[i,j,1,iz,3,3] * w[i,j,iz])
          tempZ[i,j,1,iz] = -0.5 * RhoC[i,j,iz] * ((wC + abs(wC)) * TrRe[i,j,2,iz-1] + 
            (wC - abs(wC)) * TrRe[i,j,1,iz])
          wC = (dXdxI[i,j,2,iz,3,1] * uC[i,j,iz] +
            dXdxI[i,j,2,iz,3,2] * vC[i,j,iz] + dXdxI[i,j,2,iz,3,3] * w[i,j,iz+1])
          tempZ[i,j,2,iz] = -0.5 * RhoC[i,j,iz] * ((wC + abs(wC)) * TrRe[i,j,2,iz] +
            (wC - abs(wC)) * TrRe[i,j,1,iz+1])
        end
      end  
    end    
    @inbounds for i = 1 : OrdPoly + 1
      @inbounds for j = 1 : OrdPoly + 1
        wC = (dXdxI[i,j,1,Nz,3,1] * uC[i,j,Nz] +
          dXdxI[i,j,1,Nz,3,2] * vC[i,j,Nz] + dXdxI[i,j,1,Nz,3,3] * w[i,j,Nz]) 
        tempZ[i,j,1,Nz] = -0.5 * RhoC[i,j,Nz] * ((wC + abs(wC)) * TrRe[i,j,2,Nz-1] +
          (wC - abs(wC)) * TrRe[i,j,1,Nz])
        tempZ[i,j,2,Nz] = 0.0
      end
    end  
  else
   @. tempZ = 0.0   
  end    

  @inbounds for iz = 1 : Nz  
    @views @. FRhoTrC[:,:,iz] += (tempZ[:,:,2,iz] - tempZ[:,:,1,iz])
  end    
  @inbounds for iz = 2 : Nz  
    @views @. FluxZ = 0.5 * (tempZ[:,:,1,iz] - tempZ[:,:,2,iz-1]) 
    @views @. FRhoTrC[:,:,iz] += FluxZ
  end  
  @inbounds for iz = 1 : Nz - 1  
    @views @. FluxZ = 0.5 * (tempZ[:,:,1,iz+1] - tempZ[:,:,2,iz]) 
    @views @. FRhoTrC[:,:,iz] += FluxZ
  end 
end 
