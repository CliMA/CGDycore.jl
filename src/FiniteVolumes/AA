@inline function Jacobi!(J,detJ,pinvJ,X,::Grids.Quad,ksi1,ksi2,P1,P2,P3,P4,Rad)

  XT1 =  0.25*(P1.x*(1-ksi1)*(1-ksi2)+
            P2.x*(1+ksi1)*(1-ksi2)+
            P3.x*(1+ksi1)*(1+ksi2)+
            P4.x*(1-ksi1)*(1+ksi2))
    
  XT2 =  0.25*(P1.y*(1-ksi1)*(1-ksi2)+
            P2.y*(1+ksi1)*(1-ksi2)+
            P3.y*(1+ksi1)*(1+ksi2)+
            P4.y*(1-ksi1)*(1+ksi2))
           
  XT3 =  0.25*(P1.z*(1-ksi1)*(1-ksi2)+
           P2.z*(1+ksi1)*(1-ksi2)+
            P3.z*(1+ksi1)*(1+ksi2)+
            P4.z*(1-ksi1)*(1+ksi2))
    
  XLoc = SVector{3}(XT1,XT2,XT3)
  JP = @SArray[P1.x P2.x P3.x P4.x;
               P1.y P2.y P3.y P4.y;
               P1.z P2.z P3.z P4.z]

  J3 = @SArray([-0.25 + 0.25*ksi2  -0.25 + 0.25*ksi1
                 0.25 - 0.25*ksi2  -0.25 - 0.25*ksi1
                 0.25 + 0.25*ksi2   0.25 + 0.25*ksi1
                -0.25 - 0.25*ksi2   0.25 - 0.25*ksi1])


  f = Rad *(XT1^2 + XT2^2 + XT3^2)^(-3/2)
  dX1dXT1 = f * (XT2^2 + XT3^2)
  dX1dXT2= -f * XT1 * XT2 
  dX1dXT3= -f * XT1 * XT3
  dX2dXT1 = dX1dXT2 
  dX2dXT2 = f * (XT1^2+XT3^2)
  dX2dXT3 = -f * XT2 * XT3
  dX3dXT1 = dX1dXT3 
  dX3dXT2 = dX2dXT3 
  dX3dXT3 = f*(XT1^2+XT2^2)

  J1  =   @SArray([dX1dXT1    dX1dXT2     dX1dXT3   
                dX2dXT1     dX2dXT2     dX2dXT3
                dX3dXT1     dX3dXT2     dX3dXT3])   
  J   .=   J1*JP*J3

  @views detJLoc = det(J[:,1],J[:,2])
  detJ .= detJLoc
  pinvJ  .= pinv(J)
  X .= XLoc / norm(XLoc) * Rad
end
