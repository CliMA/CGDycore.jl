function SchurSolve!(k,v,J,fac,Param)
n1=size(v,1);
n2=size(v,2);
n=n1*n2;
sw=reshape(PermutedDimsArray(Param.Cache1,(2,1)),n,1)
s=reshape(PermutedDimsArray(Param.Cache2,(2,1)),n,1)
#rRho=reshape(permute(v[:,:,1],[2,1]),n,1);
rRrho=reshape(PermutedDimsArray(v[:,:,1],(2,1)),n,1)
rTh=reshape(permute(v[:,:,5],[2,1]),n,1);
rw=reshape(permute(v[:,:,4],[2,1]),n,1);
invfac=1/fac;
invfac2=invfac/fac;
if Param.Damping
  sw=(spdiags(repmat(invfac2,n,1),0,n,n)-invfac*J.JWW-J.JWRho*J.JRhoW-J.JWTh*J.JThW)\
    (invfac*rw+J.JWRho*rRho+J.JWTh*rTh);
else
  sw=(spdiags(repmat(invfac2,n,1),0,n,n)-J.JWRho*J.JRhoW-J.JWTh*J.JThW)\
    (invfac*rw+J.JWRho*rRho+J.JWTh*rTh);
end
s=fac*(rRho+J.JRhoW*sw);
@views k[:,:,1]=permute(reshape(s,n2,n1),[2,1]);
@views k[:,:,2:3]=fac*v[:,:,2:3];
@views k[:,:,4]=permute(reshape(sw,n2,n1),[2,1]);
s=fac*(rTh+J.JThW*sw);
@views k[:,:,5]=permute(reshape(s,n2,n1),[2,1]);
end
