using LinearAlgebra
include("GaussLobattoQuad.jl")
include("DLagrange.jl")
include("Oro.jl")
include("JacobiDG2.jl")
include("DSS.jl")
include("DSSF.jl")
include("udwdx.jl")
include("wdwdx.jl")
include("IntCell.jl")
include("IntFace.jl")
include("dcdx.jl")
include("divdx.jl")
include("Sdwdz.jl")
include("Sdudz.jl")
include("dRhoSdz.jl")

function main()
  N = 20
  M = 10
  OrdPolyX=3
  H = 400
  hHill = 200
  L=1000
  if OrdPolyX>0
    #Horizontal Grid
    (wX,xw)=GaussLobattoQuad(OrdPolyX)

    Dx=zeros(OrdPolyX+1,OrdPolyX+1)
    for i=1:OrdPolyX+1
      for j=1:OrdPolyX+1
        Dx[i,j]=DLagrange(xw[i],xw,j)
      end
    end
    #  Vertical Grid
    OrdPolyZ=1
    (wZ,zw)=GaussLobattoQuad(OrdPolyZ)

    Dz=zeros(OrdPolyZ+1,OrdPolyZ+1)
    for i=1:OrdPolyZ+1
      for j=1:OrdPolyZ+1
        Dz[i,j]=DLagrange(zw[i],zw,j)
      end
    end
  end
  xP=zeros(M,OrdPolyX+1)
  xP[1,1]=0
  dx=L/M
  for i=1:M
    for j=1:OrdPoly+1
      xP[i,j]=xP[i,1]+(1+xw[j])/2*dx
    end
    if i<M
      xP[i+1,1]=xP[i,OrdPoly+1]
    end
  end  

  xP[M,OrdPolyX+1]=L

  zP=zeros(M,N+1,OrdPolyX+1)
  for j=1:M
    for k=1:OrdPolyX+1
      zP[j,1,k]=Oro(xP[j,k],L,hHill)
      zP[j,N+1,k]=H
      dzLoc=(zP[j,N+1,k]-zP[j,1,k])/N
      for i=2:N
        zP[j,i,k]=zP[j,i-1,k]+dzLoc
      end
    end
  end
  zM=zeros(M,N,OrdPoly+1)
  for i=1:N
    zM[:,i,:]=0.5*(zP[:,i,:]+zP[:,i+1,:])
  end
  dz=zeros(M,N,OrdPoly+1)
  for i=1:N
    dz[:,i,:]=zP[:,i+1,:]-zP[:,i,:]
  end
  dzF=zeros(M,N+1,OrdPoly+1)
  dzF[:,1,:]=dz[:,1,:]
  dzF[:,N+1,:]=dz[:,N,:]
  for i=2:N
    dzF[:,i,:]=0.5*(dz[:,i-1,:]+dz[:,i,:])
  end
# Metric
  ZZ=zeros(OrdPolyX+1,OrdPolyZ+1)
  X=zeros(M,N,OrdPolyX+1,OrdPolyZ+1,2)
  J=zeros(M,N,OrdPolyX+1,OrdPolyZ+1)
  dXdx=zeros(M,N,OrdPolyX+1,OrdPolyZ+1,2,2)
  dXdxI=zeros(M,N,OrdPoly+1,OrdPolyZ+1,2,2)
# dXdxIF=zeros(M,N+1,OrdPoly+1,2,2)
# dXdxIC=zeros(M,N,OrdPoly+1,2,2)
# JF=zeros(M,N+1,OrdPoly+1)
# JC=zeros(M,N,OrdPoly+1)

  for i=1:N
    for j=1:M
      @views @. ZZ[:,1]=zP[j,i,:]
      @views @. ZZ[:,2]=zP[j,i+1,:]
      @views (XLoc,JLoc,dXdxLoc,dXdxILoc)=JacobiDG2(xP[j,:],ZZ,Dx,xw,Dz,zw)
      @views @. X[j,i,:,:,:] = XLoc
      @views @. J[j,i,:,:] = JLoc
      @views @. dXdx[j,i,:,:,:,:] = dXdxLoc
      @views @. dXdxI[j,i,:,:,:,:] = dXdxILoc
    end
  end

# for i=1:N
#   @views @. JC[:,i,:]=0.5*(J[:,i,:,1]+J[:,i,:,2])
#   @views @. JF[:,i,:]=J[:,i,:,1]
#   @views @. dXdxIC[:,i,:,:,:]=0.5*(dXdxI[:,i,:,1,:,:]+dXdxI[:,i,:,2,:,:])
#   @views @. dXdxIF[:,i,:,:,:]=dXdxI[:,i,:,1,:,:]
# end
  @views @. JF[:,N+1,:]=J[:,N,:,2]
  @views @. dXdxIF[:,N+1,:,:,:]=dXdxI[:,N,:,2,:,:]
  u=rand(M,N,OrdPoly+1)
  @views @. u[:,2:N,:]=0.0
  #@views @. u[:,1,:]=0.0
  #@. u = 0.0
  u=DSS(u,JC)
  wF=2.0*rand(M,N+1,OrdPoly+1)
  @. wF -= 1.0
  @. wF = 0.0
  wF=DSSF(wF,JC)
  @views @. wF[:,1,:]=-dXdxIF[:,1,:,2,1]*u[:,1,:]/dXdxIF[:,1,:,2,2]
  @views @. wF[:,N+1,:]=0.0
  wF=DSSF(wF,JC)

  Rho=rand(M,N,OrdPoly+1)
  @. Rho += 1.0
  Rho=DSS(Rho,JC)
  RhoF=zeros(M,N+1,OrdPoly+1)
  @views @. RhoF[:,1,:] = Rho[:,1,:]
  @views @. RhoF[:,N+1,:] = Rho[:,N,:]
  for i=2:N
    @views @. RhoF[:,i,:]=(Rho[:,i-1,:]*JC[:,i-1,:]+Rho[:,i,:]*JC[:,i,:]) /
      (JC[:,i-1,:]+JC[:,i,:])
  end
  K=zeros(M,N,OrdPoly+1)
  for i=1:N
    @views @. K[:,i,:] = 0.5 * (u[:,i,:]*u[:,i,:] +
      0.5 * (wF[:,i,:] * wF[:,i,:] + wF[:,i+1,:] * wF[:,i+1,:]))
  end
  S=zeros(M,N+1,OrdPoly+1)
  uF = zeros(M,OrdPoly+1)
  for i=1:N-1
    @views @. uF=(dXdxIC[:,i,:,2,1] * u[:,i,:] * Rho[:,i,:] +
      dXdxIC[:,i+1,:,2,1] * u[:,i+1,:] * Rho[:,i+1,:]) /
      (Rho[:,i,:] * dXdxIC[:,i,:,2,2] + Rho[:,i+1,:] * dXdxIC[:,i+1,:,2,2])
    @views @. S[:,i+1,:] = RhoF[:,i+1,:] * (wF[:,i+1,:]+uF)
  end

#%%%%%%%%%%%%%%%%%
# Part 1
wDotH1 = udwdx(u,wF,Rho,Dx,dXdxIF,JC)
uDotH1 = -wdwdx(wF,Dx,dXdxIF,JC)
uICH1=IntCell(uDotH1.*Rho.*u,JC,wX)
wIFH1=IntFace(wDotH1.*RhoF.*wF,JC,wX)
IH1=uICH1+wIFH1
@show uICH1,wIFH1,IH1

#%%%%%%%%%%%%%%%%%
# Part 2
# \rho u \nabla_S K + K \nabla_S \rho u
uDotH2 = dcdx(K,Dx,dXdxIC,JC)
RhoDotH2 = divdx(Rho.*u,Dx,dXdxIC,JC)
uICH2=IntCell(uDotH2.*Rho.*u,JC,wX)
RhoIH2=IntCell(RhoDotH2.*K,JC,wX)
IH2=uICH2+RhoIH2
@show uICH2,RhoIH2,IH2

#%%%%%%%%%%%%%%%%%%%
# Part 3
wDotV = Sdwdz(wF,RhoF,S,dXdxIF,JC)
uDotV = Sdudz(u,Rho,S,dXdxIF,JC)
RhoDotV = dRhoSdz(S,dXdxIF,JC)
uICV=IntCell(uDotV.*Rho.*u,JC,wX)
wIFV=IntFace(wDotV.*RhoF.*wF,JC,wX)
KICV=IntCell(RhoDotV.*K,JC,wX)
IV=uICV+wIFV+KICV
@show uICV,wIFV,KICV,IV

#%%%%%%%%%%%%%%%%%%%
# Part 1 + Part 2 + Part 3
uDot=dcdx(K,Dx,dXdxIC,JC)-wdwdx(wF,Dx,dXdxIF,JC)+Sdudz(u,Rho,S,dXdxIF,JC)
wDot=udwdx(u,wF,Rho,Dx,dXdxIF,JC)+Sdwdz(wF,RhoF,S,dXdxIF,JC)
@show wDotV[1:5,1,1]
@show size(wDotV)
RhoDot=divdx(Rho.*u,Dx,dXdxIC,JC)+dRhoSdz(S,dXdxIF,JC)
# @views @. wDot[:,1,:] = dXdxIF[:,1,:,2,1] * uDot[:,1,:] / dXdxIF[:,1,:,2,2]
# @views @. wDot[:,1,:] = 0.0
uIC=IntCell(uDot.*Rho.*u,JC,wX)
wIF=IntFace(wDot.*RhoF.*wF,JC,wX)
KIC=IntCell(RhoDot.*K,JC,wX)
I=uIC+wIF+KIC
@show uIC,wIF,KIC,I
end
